{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["defaultState","App","props","state","breakLength","sessionLength","timeLeft","sessionTimeLeft","currentlyRunning","handleBreakButton","bind","handleSessionButton","handleReset","handleStartStop","event","target","value","this","setState","interval1","clearInterval","setInterval","beep1","document","getElementById","currentTime","play","pause","id","class","onClick","Math","floor","toString","padStart","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4705e7c4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst defaultState = {\n  breakLength: 5,\n  sessionLength: 25\n}\n\nclass App extends React.Component {\n  constructor (props) {\n    super (props);\n    this.state = {\n      breakLength: (defaultState.breakLength),\n      sessionLength: (defaultState.sessionLength),\n      timeLeft: (defaultState.sessionLength * 60),\n      sessionTimeLeft: true,\n      currentlyRunning: false\n    }\n    this.handleBreakButton = this.handleBreakButton.bind(this);\n    this.handleSessionButton = this.handleSessionButton.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleStartStop = this.handleStartStop.bind(this);\n  }\n  \n  handleBreakButton(event) {\n    if (event.target.value == -1 && this.state.breakLength > 1 && this.state.currentlyRunning == false) {\n      this.setState({\n        breakLength: this.state.breakLength - 1\n      })\n    } else if (event.target.value == 1 && this.state.breakLength < 60 && this.state.currentlyRunning == false) {\n      this.setState({\n        breakLength: this.state.breakLength + 1\n      })\n    }\n  }\n  \n  handleSessionButton(event) {\n    if (event.target.value == -1 && this.state.sessionLength > 1 && this.state.currentlyRunning == false) {\n      this.setState({\n        sessionLength: this.state.sessionLength - 1,\n        timeLeft: (this.state.sessionLength -1) * 60\n      })\n    } else if (event.target.value == 1 && this.state.sessionLength < 60 && this.state.currentlyRunning == false) {\n      this.setState({\n        sessionLength: this.state.sessionLength + 1,\n        timeLeft: (this.state.sessionLength + 1) * 60\n      })\n    }\n  }\n  \n  handleStartStop() {\n    let x = this;          //defining this as variable x to bind setInterval in its callback\n    let interval1;\n    if (this.state.currentlyRunning == true) {\n      this.setState({\n        currentlyRunning: false\n      })\n      clearInterval(interval1);\n    }\n    else if (this.state.currentlyRunning == false) {\n      this.setState({\n        currentlyRunning: true\n      })\n      interval1 = setInterval(function() {\n        if (this.state.currentlyRunning == false) {\n          clearInterval(interval1);\n        }\n        else if (this.state.timeLeft <= 0) {\n          this.setState({\n            timeLeft: (this.state.breakLength * 60),\n            sessionTimeLeft: !this.state.sessionTimeLeft\n          })\n          let beep1 = document.getElementById(\"beep\");\n          beep1.currentTime = 0;\n          beep1.play();\n        }\n        else {\n          this.setState({\n            timeLeft: this.state.timeLeft - 1\n          })\n        }\n      }.bind(x), 1000)\n    }\n  }\n  \n  handleReset() {\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timeLeft: (defaultState.sessionLength * 60),\n      sessionTimeLeft: true,\n      currentlyRunning: false\n    })\n    let beep1 = document.getElementById(\"beep\");\n    beep1.pause();\n    beep1.currentTime = 0;\n  }\n  \n  render() {\n    return (\n      <div id=\"clock-area\">\n        <div id=\"break-area\">\n          <div id=\"break-label\">\n            Break Length\n          </div>\n          <button \n            id=\"break-decrement\" \n            class=\"btn btn-primary\"\n            value=\"-1\" \n            onClick={this.handleBreakButton} \n            >\n            -1\n          </button>\n          <div id=\"break-length\">\n            {this.state.breakLength}\n          </div>\n          <button \n            id=\"break-increment\" \n            class=\"btn btn-primary\"\n            value=\"1\" \n            onClick={this.handleBreakButton} \n            >\n            +1\n          </button>\n         </div>\n        <div id=\"session-area\">\n          <div id=\"session-label\">\n            Session Length\n          </div>\n          <button \n            id=\"session-decrement\"\n            class=\"btn btn-primary\"\n            value=\"-1\" \n            onClick={this.handleSessionButton}\n            >\n            -1\n          </button>\n          <div id=\"session-length\">\n            {this.state.sessionLength}\n          </div>\n          <button \n            id=\"session-increment\"\n            class=\"btn btn-primary\"\n            value=\"1\" \n            onClick={this.handleSessionButton}\n            >\n            +1\n          </button>\n        </div>\n        <div id=\"timer-area\">\n          <div id=\"timer-label\">\n            {this.state.sessionTimeLeft ? \"Session\" : \"Break\"}\n            <div id=\"time-left\">\n              {Math.floor(this.state.timeLeft / 60).toString().padStart(2, \"0\") + \":\" + ((this.state.timeLeft % 60).toString().padStart(2, \"0\"))}\n            </div>\n          </div>\n          <button \n            id=\"start_stop\"\n            class=\"btn btn-primary\"\n            onClick={this.handleStartStop}\n            >\n            Start/Stop\n          </button>\n          <button \n            id=\"reset\"\n            class=\"btn btn-primary\"\n            onClick={this.handleReset}\n            >\n            Reset\n          </button>\n          <audio\n            id=\"beep\"\n            src=\"https://www.soundjay.com/phone/sounds/cell-phone-vibrate-1.mp3\" \n            />\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}